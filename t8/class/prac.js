// 1. 냉장고에 음식넣기
class 냉장고 {
  constructor() {
    this.신선고 = [];
    this.냉동고 = [];
    this.음료저장고 = [];
    this.과일저장고 = [];
  }
}

const my냉장고 = new 냉장고();

my냉장고.신선고.push("상추");

// console.log(my냉장고.신선고); // ["상추"]

// 2.범죄자 조사대상에 선글라스 낀사람 넣기

class 범죄자리스트 {
  constructor(인상착의인자, 성별인자, 직업인자) {
    this.인상착의 = 인상착의인자;
    this.성별 = 성별인자;
    this.직업 = 직업인자;
  }
}

const 새로운범죄자리스트 = [];
// 리스트에 넣기
새로운범죄자리스트.push(new 범죄자리스트("선글라스", "남성", "의사"));
// 다른방법으로 넣기
새로운범죄자리스트[1] = new 범죄자리스트("모자", "여성", "변호사");
// 또 다른방법으로 넣기
새로운범죄자리스트[2] = new 범죄자리스트("후드티", "남성", "개발자");
// 범죄자 리스트 출력
// console.log(새로운범죄자리스트)

//3. 가난한사람리스트 만들어보기
class 사람 {
  constructor(이름, 가진돈) {
    this.이름 = 이름;
    this.가진돈 = 가진돈;
  }
}
const 사람리스트 = [
  new 사람("무호", 1000),
  new 사람("양태", 1500),
  new 사람("우성", 300),
  new 사람("진중", false),
  new 사람("은강", 0),
];
// console.log(사람리스트)
const 가난한사람리스트 = [];
for (let i = 0; i < 사람리스트.length; i++) {
  if (사람리스트[i].가진돈 === false || 사람리스트[i].가진돈 <= 300) {
    가난한사람리스트[i] = 사람리스트[i];
  }
}
// console.log("가난한사람리스트", 가난한사람리스트)

//4. 배고픈 곰돌이 빵주기
class 곰돌이 {
  constructor(이름, 배고픔, 받기) {
    this.이름 = 이름;
    this.배고픔 = 배고픔;
    this.받기 = 받기;
  }
}
const 곰돌이오형제 = [
  new 곰돌이("곰돌일번", false, false),
  new 곰돌이("곰돌이번", false, false),
  new 곰돌이("곰돌삼번", true, false),
  new 곰돌이("곰돌사번", false, false),
  new 곰돌이("곰돌오번", true, false),
];
for (let i = 0; i < 곰돌이오형제.length; i++) {
  if (곰돌이오형제[i].배고픔 === true) {
    곰돌이오형제[i].받기 = true;
    // console.log("사과받은 곰돌이 : ", 곰돌이오형제[i]);
  }
}
// console.log(곰돌이오형제);

//5. 사과등급 나누기
class 사과 {
  constructor(번호, 크기, 당도, 흠집) {
    this.번호 = 번호;
    this.크기 = 크기;
    this.당도 = 당도;
    this.흠집 = 흠집;
  }
}
const 사과리스트 = [
  new 사과(1, 5, 5, 1),
  new 사과(2, 7, 7, 3),
  new 사과(3, 10, 10, 2),
  new 사과(4, 6, 6, 2),
  new 사과(5, 8, 8, 1),
];

const 일등급사과 = [];
const 이등급사과 = [];
const 삼등급사과 = [];
for (let i = 0; i < 사과리스트.length; i++) {
  if (
    사과리스트[i].크기 > 7 &&
    사과리스트[i].당도 > 7 &&
    사과리스트[i].흠집 <= 2
  ) {
    일등급사과.push(사과리스트[i]);
  } else if (
    사과리스트[i].크기 > 5 &&
    사과리스트[i].당도 > 5 &&
    사과리스트[i].흠집 <= 2
  ) {
    이등급사과.push(사과리스트[i]);
  } else if (
    사과리스트[i].크기 > 4 &&
    사과리스트[i].당도 > 4 &&
    사과리스트[i].흠집 <= 3
  ) {
    삼등급사과.push(사과리스트[i]);
  }
}
// console.log(
//   "일등급사과 : ",
//   일등급사과,
//   "이등급사과 : ",
//   이등급사과,
//   "삼등급사과: ",
//   삼등급사과
// );

// 6. 자동차 시동부터 주행하기
class 자동차상태 {
  constructor(현재시각, 사이드, 기어, 브레이크, 열쇠) {
    this.현재시각 = 현재시각;
    this.사이드 = 사이드;
    this.기어 = 기어;
    this.브레이크 = 브레이크;
    this.열쇠 = 열쇠;
  }
}

const 자동차상태리스트 = [
  new 자동차상태("12:30:11", true, "p", false, false),
  new 자동차상태("12:30:12", false, "n", false, false),
  new 자동차상태("12:30:13", false, "n", false, false),
  new 자동차상태("12:30:14", false, "n", true, false),
  new 자동차상태("12:30:15", false, "n", true, true),
  new 자동차상태("12:30:16", false, "d", true, true),
  new 자동차상태("12:30:17", false, "d", false, true),
  new 자동차상태("12:30:18", false, "d", false, true),
  new 자동차상태("12:30:19", false, "2", false, true),
  new 자동차상태("12:30:20", false, "2", false, true),
];

for (let i = 0; i < 자동차상태리스트.length; i++) {
  const 상태 = 자동차상태리스트[i];

  // 시동 걸린 조건
  if (
    상태.사이드 === false &&
    상태.기어 === "n" &&
    상태.브레이크 === true &&
    상태.열쇠 === true
  ) {
    // console.log(상태.현재시각, ": 시동 걸렸다");
  }

  // 주행 시작 조건
  if (
    상태.사이드 === false &&
    상태.기어 === "d" &&
    상태.브레이크 === false &&
    상태.열쇠 === true
  ) {
    // console.log(상태.현재시각, ": 주행 시작");
  }
}

// 7. 음악 플레이리스트 만들기
class 플레이리스트 {
  constructor(제목, 노래들) {
    this.제목 = 제목;
    this.노래들 = 노래들;
  }
}

const 드라이브할때좋은노래 = new 플레이리스트("드라이브할때좋은노래", [
  "짜장면이 맛있다고 하셨어",
  "팥빙수에 밥을 비벼먹어",
  "공짜밥이 좋다면",
]);
// console.log(드라이브할때좋은노래);

//8. 쇼핑몰 장바구니에 넣었다 뺏다
class 물건 {
  constructor(상품명, 가격, 유통기한) {
    this.상품명 = 상품명;
    this.가격 = 가격;
    this.유통기한 = 유통기한;
  }
}
const 상품리스트 = [
  new 물건("가지두루치기", 1000, 202501),
  new 물건("양파가제미", 450000, 202502),
  new 물건("양념고무나무", 444444, 202503),
  new 물건("등목다리미", 777, 202504),
  new 물건("감나무무침", 12345, 202505),
];
// console.log(상품리스트)
let 장바구니 = [];

function 장바구니에넣기(상품명) {
  for(let i=0; i<상품리스트.length; i++){
    if(상품명 === 상품리스트[i].상품명){
      장바구니[장바구니.length] = 상품리스트[i];
    }
  }
}
function 장바구니에서빼기(상품명){
  const 새장바구니 = [];
  for(let i=0; i<장바구니.length; i++){
    if(상품명 !== 장바구니[i].상품명){
      새장바구니[새장바구니.length] = 장바구니[i];
    }
  }
  장바구니 = 새장바구니;
}

장바구니에넣기('가지두루치기');
장바구니에넣기('감나무무침');
장바구니에넣기('양파가제미');
// console.log(장바구니)
장바구니에서빼기('가지두루치기');
console.log(장바구니)
